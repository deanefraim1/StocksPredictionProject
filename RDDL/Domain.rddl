domain STOCK_model {
    requirements = {
        constrained-state
    };

    types {
        stock : object;
    };

    pvariables {
        ///////////////////////////////////////////
        // non-fluents == topology and geometry
        ///////////////////////////////////////////

        // is the time index last in the queue, i,e., maximum delay memory depth
        IS-FINAL-TIME(int time)                                    :  {non-fluent, bool, default = false };

        // stock price
        STOCK-PRICE(stock, int time)                               :  { non-fluent, real, default = 0 };

        //Commission rate
        COMMISION-RATE()                                           :  { non-fluent, real, default = 0.01 };

        // Buy/Sell Commission
        Commition(real price)                                      :  { interm-fluent, real, default = 0 };


        //////////////////////////////
        // interm fluents
        //////////////////////////////


        //////////////////////////////
        // states fluents
        //////////////////////////////

        // current time
        CurrentTime()                                              :  { state-fluent, int, default = 0 };

        // number of shares owned
        Shares(stock)                                              :  { state-fluent, real, default = 0 };


        //////////////////////////////
        // action fluents
        //////////////////////////////

        // amount of shares to transfer
        Transfer(stock, stock)                                     :  { action-fluent, real, default = 0 };


        //////////////////////////////
        // observation fluents
        //////////////////////////////
    };

    cpfs {
        ////////////////////////////////////
        // interm fluents
        ////////////////////////////////////

        // Buy/Sell Commission
        Commition(int price) = COMMISION-RATE() * price;


        ////////////////////////////////////
        // State space evolution
        ////////////////////////////////////

        // Time evolution
        CurrentTime'() = CurrentTime() + 1;

        // Number of shares owned dynamic
        Shares'(stock) = Shares(stock) + sum_{?s : stock} [ ((Transfer(?s, stock) * STOCK-PRICE(?s, CurrentTime()))/STOCK-PRICE(stock, CurrentTime())
                                                             - 2 * Commission(Transfer(?s, stock) * STOCK-PRICE(?s, CurrentTime())))
                                                            - ((Transfer(stock, ?s) * STOCK-PRICE(stock, CurrentTime()))/STOCK-PRICE(?s, CurrentTime())
                                                               - 2 * Commission(Transfer(stock, ?s) * STOCK-PRICE(stock, CurrentTime()))) ];
    }

    reward = ( sum_{?s : stock} [ Shares'(?s) * (STOCK-PRICE(?s, CurrentTime'()) - STOCK-PRICE(?s, CurrentTime())) ] );

    action-preconditions {
		forall_{?s1 : stock, ?s2 : stock} [ Transfer(?s1, ?s2) <= Shares(?s1) ];
	};

    state-invariants {
        forall_{?s : stock} [ Shares(?s) >= 0 ];
        forall_{?s : stock, ?t : int} [ STOCK-PRICE(?s, ?t) >= 0 ];
	};
}