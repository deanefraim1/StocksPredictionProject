domain STOCK_model {
    requirements = {
        constrained-state
    };

    types {
        stock : object;
        time : object;
    };

    pvariables {
        ///////////////////////////////////////////
        // non-fluents == topology and geometry
        ///////////////////////////////////////////

        // stock price
        STOCK-PRICE(stock, time)                                                :  { non-fluent, real, default = 0.0 };

        // Buy Commission Rate
        BUY-COMMISSION-RATE                                                     :  { non-fluent, real, default = 0.0 };

        // Sell Commission Rate
        SELL-COMMISSION-RATE                                                    :  { non-fluent, real, default = 0.0 };

        // Next time dynamics
        NEXT(time, time)                                                        :  { non-fluent, bool, default = false };


        //////////////////////////////
        // interm fluents
        //////////////////////////////

        // Buy Commission
        BuyCommission(stock, stock)                                             :  { interm-fluent, real };

        // Sell Commission
        SellCommission(stock, stock)                                            :  { interm-fluent, real };

        // Toal transfer Commission
        TotalCommission(stock, stock)                                           :  { interm-fluent, real };

        // Money from stock transfer
        MoneyTransfer(stock, stock)                                             :  { interm-fluent, real };

        // CurrentTimeStockPrice
        CurrentTimeStockPrice(stock)                                            :  { interm-fluent, real };


        //////////////////////////////
        // states fluents
        //////////////////////////////

        // current time
        CurrentTime(time)                                                       :  { state-fluent, bool, default = false};

        // number of shares owned
        Shares(stock)                                                           :  { state-fluent, real, default = 0.0};

        //////////////////////////////
        // action fluents
        //////////////////////////////

        // amount of shares to transfer
        Transfer(stock, stock)                                                  :  { action-fluent, real, default = 0.0};


        //////////////////////////////
        // observation fluents
        //////////////////////////////
    };

    cpfs {
        ////////////////////////////////////
        // interm fluents
        ////////////////////////////////////

        // Buy Commission
        BuyCommission(?s1, ?s2) = Transfer(?s1, ?s2) * CurrentTimeStockPrice(?s1) * BUY-COMMISSION-RATE;

        // Sell Commission
        SellCommission(?s1, ?s2) = Transfer(?s1, ?s2) * CurrentTimeStockPrice(?s1) * SELL-COMMISSION-RATE;

        // Total transfer Commission
        TotalCommission(?s1, ?s2) = BuyCommission(?s1, ?s2) + SellCommission(?s1, ?s2);

        // Money from stock transfer
        MoneyTransfer(?s1, ?s2) = Transfer(?s1, ?s2) * CurrentTimeStockPrice(?s1);

        // CurrentTimeStockPrice
        CurrentTimeStockPrice(?s) = (sum_{?t : time} [ CurrentTime(?t) * STOCK-PRICE(?s, ?t) ]);

        ////////////////////////////////////
        // State space evolution
        ////////////////////////////////////

        // Time evolution
        CurrentTime'(?t2) = (sum_{?t1 : time} [ CurrentTime(?t1) * NEXT(?t1, ?t2) ]) > 0;

        // Number of shares owned dynamic
        Shares'(?stock) = Shares(?stock) + sum_{?s : stock} [ ((MoneyTransfer(?s, ?stock) - TotalCommission(?s, ?stock))/CurrentTimeStockPrice(?stock))
                                                            - ((MoneyTransfer(?stock, ?s) - TotalCommission(?s, ?stock))/CurrentTimeStockPrice(?s)) ];

                                                            
    };

    reward = sum_{?s : stock} [ Shares'(?s) * ((sum_{?t : time} [ CurrentTime'(?t) * STOCK-PRICE(?s, ?t) ]) - CurrentTimeStockPrice(?s)) ];

    action-preconditions {
		forall_{?s1 : stock, ?s2 : stock} [ Transfer(?s1, ?s2) <= Shares(?s1) ];
	};

    state-invariants {
        forall_{?s : stock} [ Shares(?s) >= 0 ];
        //forall_{?s : stock, ?t : int} [ STOCK-PRICE(?s, ?t) >= 0 ];
	};
}